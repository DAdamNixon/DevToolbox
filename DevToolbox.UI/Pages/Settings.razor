@page "/settings"
@inject DevToolbox.Services.ThemeService ThemeService
@inject DevToolbox.UI.Services.ThemeJsInterop ThemeJsInterop

<div class="container">
    <h1>Settings</h1>
    <p>Configure application preferences and settings.</p>
    
    <div class="settings-container">
        <div class="settings-group">
            <h2>Appearance</h2>
            
            <div class="setting-item">
                <label for="theme">Theme</label>
                <select id="theme" class="setting-control" @onchange="OnThemeChanged" value="@selectedTheme">
                    <option value="light">Light</option>
                    <option value="dark">Dark</option>
                    <option value="system">System Default</option>
                </select>
            </div>
            
            <div class="setting-item">
                <label>Theme Preview</label>
                <div class="theme-preview">
                    <div class="@(isDarkThemePreview ? "dark-preview" : "light-preview")">
                        <div class="preview-header"></div>
                        <div class="preview-content">
                            <div class="preview-sidebar"></div>
                            <div class="preview-main"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="setting-item">
                <label for="auto-save">Auto-save</label>
                <div class="toggle">
                    <input type="checkbox" id="auto-save" checked />
                    <span class="toggle-label">Enabled</span>
                </div>
            </div>
        </div>
        
        <div class="settings-group">
            <h2>Workspace Settings</h2>
            
            <div class="setting-item">
                <label for="default-workspace">Default Workspace Location</label>
                <div class="file-input">
                    <input type="text" id="default-workspace" value="C:\Projects" class="setting-control" />
                    <button class="browse-button">Browse</button>
                </div>
            </div>
        </div>
        
        <div class="form-actions">
            <button class="save-button" @onclick="SaveSettings">Save Settings</button>
            <button class="reset-button" @onclick="ResetToDefaults">Reset to Defaults</button>
        </div>
    </div>
</div>

<style>
    .theme-preview {
        width: 100%;
        height: 150px;
        border-radius: 4px;
        overflow: hidden;
        border: 1px solid #ccc;
    }
    
    .dark-preview {
        width: 100%;
        height: 100%;
        background-color: #121212;
        color: #e0e0e0;
    }
    
    .light-preview {
        width: 100%;
        height: 100%;
        background-color: #f5f5f5;
        color: #333;
    }
    
    .preview-header {
        height: 30px;
        background-color: #2c3e50;
    }
    
    .dark-preview .preview-header {
        background-color: #1f1f1f;
    }
    
    .preview-content {
        display: flex;
        height: calc(100% - 30px);
    }
    
    .preview-sidebar {
        width: 25%;
        height: 100%;
        background-color: #ecf0f1;
    }
    
    .dark-preview .preview-sidebar {
        background-color: #1e1e1e;
    }
    
    .preview-main {
        width: 75%;
        height: 100%;
        background-color: #fff;
    }
    
    .dark-preview .preview-main {
        background-color: #121212;
    }
</style>

@code {
    private string selectedTheme = "system";
    private bool isDarkThemePreview = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Initialize theme based on current system state
        var isDarkMode = await ThemeJsInterop.IsDarkModeEnabledAsync();
        isDarkThemePreview = isDarkMode;
        
        // Set the selected theme dropdown
        if (isDarkMode)
        {
            selectedTheme = "dark";
        }
        else
        {
            // Check local storage for theme preference
            var isSystem = await GetIsSystemPreferenceAsync();
            selectedTheme = isSystem ? "system" : "light";
        }
        
        await base.OnInitializedAsync();
    }
    
    private async Task OnThemeChanged(ChangeEventArgs e)
    {
        string newTheme = e.Value?.ToString() ?? "system";
        
        switch (newTheme)
        {
            case "dark":
                isDarkThemePreview = true;
                await ThemeService.SetThemeAsync(true);
                await ThemeJsInterop.ToggleDarkModeAsync(true);
                await SaveThemePreferenceAsync("dark");
                break;
                
            case "light":
                isDarkThemePreview = false;
                await ThemeService.SetThemeAsync(false);
                await ThemeJsInterop.ToggleDarkModeAsync(false);
                await SaveThemePreferenceAsync("light");
                break;
                
            case "system":
            default:
                // Use system preference
                var prefersDark = await GetSystemPrefersDarkModeAsync();
                isDarkThemePreview = prefersDark;
                await ThemeService.SetThemeAsync(prefersDark);
                await ThemeJsInterop.ToggleDarkModeAsync(prefersDark);
                await SaveThemePreferenceAsync("system");
                break;
        }
    }
    
    private async Task<bool> GetSystemPrefersDarkModeAsync()
    {
        // This is a simplification; actually, we are relying on the browser's
        // preference which was set in the JavaScript
        return await ThemeJsInterop.IsDarkModeEnabledAsync();
    }
    
    private async Task SaveThemePreferenceAsync(string preference)
    {
        // In a real app, this would save to some storage
        // For now, we just use localStorage via JS interop
        await Task.CompletedTask;
    }
    
    private async Task<bool> GetIsSystemPreferenceAsync()
    {
        // In a real app, this would check if the user has set to follow system
        // For now, we assume system if not explicitly set
        return await Task.FromResult(true);
    }
    
    private async Task SaveSettings()
    {
        // Save all settings - for now just do the theme which is handled immediately
        await Task.CompletedTask;
    }
    
    private async Task ResetToDefaults()
    {
        selectedTheme = "system";
        isDarkThemePreview = await GetSystemPrefersDarkModeAsync();
        await ThemeService.SetThemeAsync(isDarkThemePreview);
        await ThemeJsInterop.ToggleDarkModeAsync(isDarkThemePreview);
        await SaveThemePreferenceAsync("system");
    }
} 