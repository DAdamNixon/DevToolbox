@page "/powershell"
@inject PowerShellService PowerShellService

<div class="grid-container">
    <!-- Left Sidebar -->
    <div class="sidebar">
        <div class="search-box">
            <input type="text" 
                @bind-value="searchText" 
                @bind-value:event="oninput" 
                placeholder="Search scripts..." 
                class="form-control" />
        </div>
        <div class="script-list">
            @foreach (var script in FilteredScripts)
            {
                <div class="script-item @(script.Name == selectedScript ? "selected" : "")"
                    @onclick="() => LoadScript(script.Name)">
                    @script.Name
                </div>
            }
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        @if (!string.IsNullOrEmpty(selectedScript))
        {
            <div class="script-details">
                <h2>@selectedScript</h2>
                
                <div class="script-editor">
                    <textarea @bind="scriptText" 
                        rows="10" 
                        class="form-control code-editor">
                    </textarea>
                </div>

                <div class="parameters-section">
                    <div class="form-group">
                        <label>Project Path:</label>
                        <input type="text" @bind="projectPath" class="form-control" />
                    </div>
                </div>

                <div class="output-section">
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="error-message">
                            @error
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(output))
                    {
                        <pre class="output-text">@output</pre>
                    }
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SaveScript" disabled="@isExecuting">
                        Save
                    </button>
                    <button class="btn btn-success" @onclick="ExecuteScript" disabled="@isExecuting">
                        @(isExecuting ? "Running..." : "Run Script")
                    </button>
                    <button class="btn btn-warning" @onclick="ExecuteScriptWithParams" disabled="@isExecuting">
                        Run With Parameters
                    </button>
                    <button class="btn btn-danger" @onclick="DeleteScript" disabled="@isExecuting">
                        Delete
                    </button>
                    <button class="btn btn-secondary" @onclick="ClearOutput" disabled="@isExecuting">
                        Clear Output
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ScriptInfo> availableScripts = new();
    private string selectedScript = "";
    private string scriptText = "";
    private string output = "";
    private string error = "";
    private bool isExecuting = false;
    private string projectPath = "";
    private string newScriptName = "";

    private string searchText = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadScripts();
    }
    
    private async Task LoadScripts()
    {
        availableScripts = PowerShellService.GetAvailableScripts().ToList();
        
        // If there are scripts, load the first one
        if (availableScripts.Any() && string.IsNullOrEmpty(selectedScript))
        {
            await LoadScript(availableScripts.First().Name);
        }
    }
    
    private async Task LoadScript(string name)
    {
        selectedScript = name;
        var content = await PowerShellService.GetScriptContentAsync(name);
        
        if (content != null)
        {
            scriptText = content;
        }
        else
        {
            scriptText = "";
            error = $"Could not load script '{name}'.";
        }
    }
    
    private IEnumerable<ScriptInfo> FilteredScripts => availableScripts
        .Where(s => string.IsNullOrEmpty(searchText) || 
                    s.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        .ToList();
        
    private async Task SaveScript()
    {
        if (string.IsNullOrEmpty(selectedScript))
        {
            return;
        }
        
        if (await PowerShellService.SaveScriptAsync(selectedScript, scriptText))
        {
            await LoadScripts();
            output = $"Script '{selectedScript}' saved successfully.";
            error = "";
        }
        else
        {
            error = $"Failed to save script '{selectedScript}'.";
        }
    }
    
    private async Task DeleteScript()
    {
        if (string.IsNullOrEmpty(selectedScript))
        {
            return;
        }
        
        if (PowerShellService.DeleteScript(selectedScript))
        {
            var deleted = selectedScript;
            selectedScript = "";
            scriptText = "";
            await LoadScripts();
            output = $"Script '{deleted}' deleted successfully.";
            error = "";
        }
        else
        {
            error = $"Failed to delete script '{selectedScript}'.";
        }
    }
    
    private async Task CreateNewScript()
    {
        // Create a simple script template
        selectedScript = "NewScript" + DateTime.Now.ToString("yyyyMMddHHmmss");
        scriptText = "# New PowerShell Script\n# Created: " + DateTime.Now.ToString("g") + "\n\n# Add your code here\n";
        
        // Save it immediately
        await SaveScript();
    }
    
    private async Task ExecuteScript()
    {
        if (string.IsNullOrWhiteSpace(scriptText))
            return;
            
        isExecuting = true;
        try
        {
            (output, error) = await PowerShellService.ExecuteScriptAsync(scriptText);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private async Task ExecuteScriptWithParams()
    {
        if (string.IsNullOrWhiteSpace(scriptText) || string.IsNullOrWhiteSpace(projectPath))
            return;
            
        isExecuting = true;
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "ProjectPath", projectPath }
            };
            
            (output, error) = await PowerShellService.ExecuteScriptWithParametersAsync(scriptText, parameters);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private async Task RunCleanArtifacts()
    {
        if (string.IsNullOrWhiteSpace(projectPath))
            return;
            
        isExecuting = true;
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "ProjectPath", projectPath }
            };
            
            (output, error) = await PowerShellService.ExecuteScriptFileAsync("CleanBuildArtifacts", parameters);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private void ClearOutput()
    {
        output = "";
        error = "";
    }
}