@page "/powershell"
@inject PowerShellService PowerShellService

<div class="container-fluid mt-4">
    <h2>PowerShell Scripts</h2>
    
    <div class="row mt-4">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    Available Scripts
                    <button class="btn btn-sm btn-outline-primary float-end" @onclick="CreateNewScript">
                        <i class="oi oi-plus"></i> New
                    </button>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @foreach (var script in availableScripts)
                        {
                            <button class="list-group-item list-group-item-action @(selectedScript == script.Name ? "active" : "")"
                                    @onclick="() => LoadScript(script.Name)">
                                @script.Name
                                <small class="d-block text-muted">@script.LastModified.ToString("g")</small>
                            </button>
                        }
                    </div>
                </div>
            </div>
            
            <div class="mt-3">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Project path..." @bind="projectPath" />
                    <button class="btn btn-warning" @onclick="RunCleanArtifacts" disabled="@isExecuting">
                        Clean Artifacts
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    @if (string.IsNullOrEmpty(selectedScript))
                    {
                        <span>Script Editor</span>
                    }
                    else
                    {
                        <div class="d-flex justify-content-between align-items-center">
                            <span>@selectedScript</span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="SaveScript" disabled="@isExecuting">
                                    Save
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="DeleteScript" disabled="@isExecuting">
                                    Delete
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <textarea class="form-control font-monospace" style="min-height: 300px;" @bind="scriptText"></textarea>
                    </div>
                    
                    <div class="d-flex justify-content-between">
                        <div>
                            @if (!string.IsNullOrEmpty(selectedScript) && selectedScript == "CleanBuildArtifacts")
                            {
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Project path..." @bind="projectPath" />
                                    <button class="btn btn-primary" @onclick="() => ExecuteScriptWithParams()" disabled="@isExecuting">
                                        Execute with Path
                                    </button>
                                </div>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="ExecuteScript" disabled="@isExecuting">
                                    @if (isExecuting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Executing...</span>
                                    }
                                    else
                                    {
                                        <span>Execute Script</span>
                                    }
                                </button>
                            }
                        </div>
                        
                        <div>
                            <button class="btn btn-outline-secondary" @onclick="ClearOutput" disabled="@isExecuting">
                                Clear Output
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(output))
            {
                <div class="card mt-3">
                    <div class="card-header bg-success text-white">
                        Output
                    </div>
                    <div class="card-body">
                        <pre style="max-height: 300px; overflow: auto;">@output</pre>
                    </div>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="card mt-3">
                    <div class="card-header bg-danger text-white">
                        Error
                    </div>
                    <div class="card-body">
                        <pre style="max-height: 300px; overflow: auto;">@error</pre>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ScriptInfo> availableScripts = new();
    private string selectedScript = "";
    private string scriptText = "";
    private string output = "";
    private string error = "";
    private bool isExecuting = false;
    private string projectPath = "";
    private string newScriptName = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadScripts();
    }
    
    private async Task LoadScripts()
    {
        availableScripts = PowerShellService.GetAvailableScripts().ToList();
        
        // If there are scripts, load the first one
        if (availableScripts.Any() && string.IsNullOrEmpty(selectedScript))
        {
            await LoadScript(availableScripts.First().Name);
        }
    }
    
    private async Task LoadScript(string name)
    {
        selectedScript = name;
        var content = await PowerShellService.GetScriptContentAsync(name);
        
        if (content != null)
        {
            scriptText = content;
        }
        else
        {
            scriptText = "";
            error = $"Could not load script '{name}'.";
        }
    }
    
    private async Task SaveScript()
    {
        if (string.IsNullOrEmpty(selectedScript))
        {
            return;
        }
        
        if (await PowerShellService.SaveScriptAsync(selectedScript, scriptText))
        {
            await LoadScripts();
            output = $"Script '{selectedScript}' saved successfully.";
            error = "";
        }
        else
        {
            error = $"Failed to save script '{selectedScript}'.";
        }
    }
    
    private async Task DeleteScript()
    {
        if (string.IsNullOrEmpty(selectedScript))
        {
            return;
        }
        
        if (PowerShellService.DeleteScript(selectedScript))
        {
            var deleted = selectedScript;
            selectedScript = "";
            scriptText = "";
            await LoadScripts();
            output = $"Script '{deleted}' deleted successfully.";
            error = "";
        }
        else
        {
            error = $"Failed to delete script '{selectedScript}'.";
        }
    }
    
    private async Task CreateNewScript()
    {
        // Create a simple script template
        selectedScript = "NewScript" + DateTime.Now.ToString("yyyyMMddHHmmss");
        scriptText = "# New PowerShell Script\n# Created: " + DateTime.Now.ToString("g") + "\n\n# Add your code here\n";
        
        // Save it immediately
        await SaveScript();
    }
    
    private async Task ExecuteScript()
    {
        if (string.IsNullOrWhiteSpace(scriptText))
            return;
            
        isExecuting = true;
        try
        {
            (output, error) = await PowerShellService.ExecuteScriptAsync(scriptText);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private async Task ExecuteScriptWithParams()
    {
        if (string.IsNullOrWhiteSpace(scriptText) || string.IsNullOrWhiteSpace(projectPath))
            return;
            
        isExecuting = true;
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "ProjectPath", projectPath }
            };
            
            (output, error) = await PowerShellService.ExecuteScriptWithParametersAsync(scriptText, parameters);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private async Task RunCleanArtifacts()
    {
        if (string.IsNullOrWhiteSpace(projectPath))
            return;
            
        isExecuting = true;
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "ProjectPath", projectPath }
            };
            
            (output, error) = await PowerShellService.ExecuteScriptFileAsync("CleanBuildArtifacts", parameters);
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isExecuting = false;
        }
    }
    
    private void ClearOutput()
    {
        output = "";
        error = "";
    }
} 