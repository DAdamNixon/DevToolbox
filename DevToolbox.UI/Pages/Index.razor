@page "/"
@using DevToolbox.Services
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Models
@using DevToolbox.Services.Services
@using DevToolbox.UI.Components
@using Microsoft.JSInterop
@using System.IO
@using Microsoft.Extensions.Configuration
@inject CardStateService CardStateService
@inject IYamlStorageService YamlStorage
@inject DirectoryStructureService DirectoryService
@inject PowerShellService PowerShellService
@inject IWorkspaceService WorkspaceService
@inject IConfiguration Configuration
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>DevToolbox</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">DevToolbox</h1>
            <div class="search-container mb-4">
                <input type="text" 
                    class="form-control form-control-lg"
                    placeholder="Search across all workspaces..."
                    @ref="searchInput"
    value="@searchText"
    @oninput="HandleSearchInput" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column gap-4">
                @foreach (var group in FilteredGroups)
                {
                    <WorkspaceGroupCard 
                        Group="group"
                        GlobalOptions="GlobalOptions"
                        AvailableScripts="AvailableScripts"
                        AllWorkspaces="AllWorkspaces"
                        AllGroups="WorkspaceService.WorkspaceGroups"
                        OnDeleteGroup="DeleteGroup"
                        OnOpenWorkspaceLocation="OpenWorkspaceLocation"
                        OnOpenInExplorer="OpenLocationInExplorer"
                        OnOpenInTerminal="OpenLocationInTerminal"
                        OnOpenWithCustomApp="OpenLocationWithCustomApp"
                        OnRunScriptOnLocation="RunScriptOnLocation"
                        OnAddWorkspace="SaveWorkspaces"
                        OnMoveToGroup="HandleMoveToGroup"/>
                }
                <AddWorkspaceGroupCard 
                    ExistingGroups="WorkspaceService.WorkspaceGroups"
                    OnGroupCreated="HandleGroupCreated" />
            </div>
        </div>
    </div>
</div>

@code {
    private DotNetObjectReference<Index>? objRef;
    private GlobalCustomOpenOptions GlobalOptions { get; set; } = new();
    private List<ScriptInfo> AvailableScripts { get; set; } = new();
    private List<Workspace> AllWorkspaces { get; set; } = new();
    private ElementReference searchInput;
    private string searchText = "";
    
    private List<WorkspaceGroup> FilteredGroups => string.IsNullOrWhiteSpace(searchText) 
        ? WorkspaceService.WorkspaceGroups 
        : WorkspaceService.WorkspaceGroups
            .Select(g => new WorkspaceGroup { Id = g.Id, Name = g.Name, Workspaces = FilterWorkspaces(g.Workspaces) })
            .Where(g => g.Workspaces.Any())
            .ToList();

    private List<Workspace> FilterWorkspaces(List<Workspace> workspaces)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return workspaces;

        return workspaces
            .Where(w => w.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        LoadScripts();
        await LoadWorkspacesAsync();
    }

    private void LoadScripts()
    {
        AvailableScripts = PowerShellService.GetAvailableScripts().ToList();
    }

    private async Task LoadWorkspacesAsync()
    {
        var groups = await WorkspaceService.GetWorkspaceGroupsAsync();
        AllWorkspaces = groups.SelectMany(g => g.Workspaces).ToList();
        StateHasChanged();
    }

    private async Task HandleGroupCreated(WorkspaceGroup group)
    {
        WorkspaceService.WorkspaceGroups.Add(group);
        await SaveWorkspaces();
        StateHasChanged();
    }

    private async Task DeleteGroup(WorkspaceGroup group)
    {
        WorkspaceService.WorkspaceGroups.Remove(group);
        await SaveWorkspaces();
        StateHasChanged();
    }

    private async Task SaveWorkspaces()
    {
        await WorkspaceService.SaveWorkspaceGroupsAsync(WorkspaceService.WorkspaceGroups);
        await LoadWorkspacesAsync();
        StateHasChanged();
    }

    private async Task OpenWorkspaceLocation((Workspace workspace, WorkspaceLocation location) args)
    {
        await WorkspaceService.OpenWorkspaceLocationAsync(args.workspace, args.location);
    }

    private async Task OpenLocationInExplorer(WorkspaceLocation location)
    {
        await WorkspaceService.OpenLocationInExplorerAsync(location);
    }

    private async Task OpenLocationInTerminal(WorkspaceLocation location)
    {
        await WorkspaceService.OpenLocationInTerminalAsync(location);
    }

    private async Task OpenLocationWithCustomApp((Workspace workspace, WorkspaceLocation location, CustomOpenOption option) args)
    {
        await WorkspaceService.OpenLocationWithCustomAppAsync(args.workspace, args.location, args.option);
    }

    private async Task RunScriptOnLocation((ScriptInfo script, Workspace workspace, WorkspaceLocation location) args)
    {
        await WorkspaceService.RunScriptOnLocationAsync(args.script, args.workspace, args.location);
    }

    private async Task HandleMoveToGroup((Workspace workspace, string groupName) args)
    {
        await WorkspaceService.SaveWorkspaceGroupsAsync(WorkspaceService.WorkspaceGroups);
        await LoadWorkspacesAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerSearchShortcut", searchInput, objRef);
        }
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        var groupIds = FilteredGroups.Select(g => g.Name).ToList();
        CardStateService.SetSearchExpanded(!string.IsNullOrWhiteSpace(searchText), groupIds);
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleSearchCleared()
    {
        searchText = string.Empty;
        CardStateService.SetSearchExpanded(false, Array.Empty<string>());
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}