@page "/"
@using DevToolbox.Services
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Models
@using DevToolbox.Services.Services
@using DevToolbox.UI.Components
@using Microsoft.JSInterop
@using System.IO
@using Microsoft.Extensions.Configuration
@inject IYamlStorageService YamlStorage
@inject DirectoryStructureService DirectoryService
@inject PowerShellService PowerShellService
@inject IWorkspaceService WorkspaceService
@inject IConfiguration Configuration
@inject IJSRuntime JS

<PageTitle>DevToolbox</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">DevToolbox</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column gap-4">
                @foreach (var group in WorkspaceService.WorkspaceGroups)
                {
                    <WorkspaceGroupCard 
                        Group="group"
                        GlobalOptions="GlobalOptions"
                        AvailableScripts="AvailableScripts"
                        AllWorkspaces="AllWorkspaces"
                        AllGroups="WorkspaceService.WorkspaceGroups"
                        OnDeleteGroup="DeleteGroup"
                        OnOpenWorkspaceLocation="OpenWorkspaceLocation"
                        OnOpenInExplorer="OpenLocationInExplorer"
                        OnOpenInTerminal="OpenLocationInTerminal"
                        OnOpenWithCustomApp="OpenLocationWithCustomApp"
                        OnRunScriptOnLocation="RunScriptOnLocation"
                        OnAddWorkspace="SaveWorkspaces"
                        OnMoveToGroup="HandleMoveToGroup"/>
                }
                <AddWorkspaceGroupCard 
                    ExistingGroups="WorkspaceService.WorkspaceGroups"
                    OnGroupCreated="HandleGroupCreated" />
            </div>
        </div>
    </div>
</div>

@code {
    private GlobalCustomOpenOptions GlobalOptions { get; set; } = new();
    private List<ScriptInfo> AvailableScripts { get; set; } = new();
    private List<Workspace> AllWorkspaces { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        LoadGlobalOptions();
        LoadScripts();
        await LoadWorkspacesAsync();
    }

    private void LoadGlobalOptions()
    {
        var options = Configuration.GetSection("CustomOpenOptions").Get<Dictionary<string, CustomOpenOption>>();
        if (options != null)
        {
            GlobalOptions.Options = options;
        }
    }

    private void LoadScripts()
    {
        AvailableScripts = PowerShellService.GetAvailableScripts().ToList();
    }

    private async Task LoadWorkspacesAsync()
    {
        var groups = await WorkspaceService.GetWorkspaceGroupsAsync();
        AllWorkspaces = groups.SelectMany(g => g.Workspaces).ToList();
        StateHasChanged();
    }

    private async Task HandleGroupCreated(WorkspaceGroup group)
    {
        WorkspaceService.WorkspaceGroups.Add(group);
        await SaveWorkspaces();
        StateHasChanged();
    }

    private async Task DeleteGroup(WorkspaceGroup group)
    {
        WorkspaceService.WorkspaceGroups.Remove(group);
        await SaveWorkspaces();
        StateHasChanged();
    }

    private async Task SaveWorkspaces()
    {
        await WorkspaceService.SaveWorkspaceGroupsAsync(WorkspaceService.WorkspaceGroups);
        await LoadWorkspacesAsync();
    }

    private async Task OpenWorkspaceLocation((Workspace workspace, WorkspaceLocation location) args)
    {
        await WorkspaceService.OpenWorkspaceLocationAsync(args.workspace, args.location);
    }

    private async Task OpenLocationInExplorer(WorkspaceLocation location)
    {
        await WorkspaceService.OpenLocationInExplorerAsync(location);
    }

    private async Task OpenLocationInTerminal(WorkspaceLocation location)
    {
        await WorkspaceService.OpenLocationInTerminalAsync(location);
    }

    private async Task OpenLocationWithCustomApp((Workspace workspace, WorkspaceLocation location, CustomOpenOption option) args)
    {
        await WorkspaceService.OpenLocationWithCustomAppAsync(args.workspace, args.location, args.option);
    }

    private async Task RunScriptOnLocation((ScriptInfo script, Workspace workspace, WorkspaceLocation location) args)
    {
        await WorkspaceService.RunScriptOnLocationAsync(args.script, args.workspace, args.location);
    }

    private async Task HandleMoveToGroup((Workspace workspace, string groupName) args)
    {
        // Update the workspace's group in the service
        await WorkspaceService.SaveWorkspaceGroupsAsync(WorkspaceService.WorkspaceGroups);
        
        // Refresh the workspaces list
        await LoadWorkspacesAsync();
        
        // Force UI update
        StateHasChanged();
    }
}