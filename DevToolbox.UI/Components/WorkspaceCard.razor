@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Services
@using DevToolbox.UI.Services
@using DevToolbox.UI.Models
@using Microsoft.JSInterop
@using System.Diagnostics
@using DevToolbox.UI.Components.Dialogs
@inject IJSRuntime JS
@inject CardStateService CardStateService
@inject ViewModelFactory ViewModelFactory
@inject ModalStateService ModalStateService
@inject ISystemService SystemService

<div class="card bg-dark text-light border-secondary mb-3 @(WorkspaceViewModel.IsExpanded ? "expanded" : "")">
    <div class="card-header border-secondary d-flex align-items-center p-0">
        <div class="flex-grow-1 h-100 px-3 py-2" @onclick="ToggleExpand" style="cursor: pointer;">
            <h5 class="card-title mb-0">@WorkspaceViewModel.Name</h5>
        </div>
        <div class="dropdown h-100 border-start border-secondary">
            <button class="btn btn-link text-light dropdown-toggle h-100 px-3" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                <li>
                    <button class="dropdown-item" @onclick="ShowAddLocationModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Location
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item" @onclick="ShowMoveToGroupModal">
                        <i class="bi bi-folder2 me-2"></i>Move to Group
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" @onclick="ShowRenameModal">
                        <i class="bi bi-pencil me-2"></i>Rename
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item text-danger" @onclick="() => OnDeleteWorkspace.InvokeAsync()">
                        <i class="bi bi-trash me-2"></i>Delete Workspace
                    </button>
                </li>
            </ul>
        </div>
    </div>

    @if (WorkspaceViewModel.IsExpanded)
    {
        <div class="card-body">
            <div class="d-flex flex-column gap-3">
                @foreach (var location in WorkspaceViewModel.Locations)
                {
                    <div class="card bg-dark text-light border-secondary">
                        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <h6 class="card-title mb-0">@location.Name</h6>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-light btn-sm" title="Open Location" @onclick="() => OpenLocation(location)">
                                    <i class="bi bi-folder"></i>
                                </button>
                                <div class="dropdown">
                                    <button class="btn btn-outline-light btn-sm dropdown-toggle" title="More Options" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                                        <li>
                                            <button class="dropdown-item" @onclick="() => OnOpenInExplorer.InvokeAsync(location)">
                                                <i class="bi bi-folder2-open me-2"></i>Open in Explorer
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" @onclick="() => OnOpenInTerminal.InvokeAsync(location)">
                                                <i class="bi bi-terminal me-2"></i>Open in Terminal
                                            </button>
                                        </li>
                                        @if (GlobalOptions.Options.Any())
                                        {
                                            <li><hr class="dropdown-divider"></li>
                                            <li><h6 class="dropdown-header">Open With</h6></li>
                                            @foreach (var option in GlobalOptions.Options)
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => OnOpenWithCustomApp.InvokeAsync((WorkspaceViewModel.Workspace, location, option.Value))">
                                                        <i class="bi bi-box-arrow-up-right me-2"></i>@option.Key
                                                    </button>
                                                </li>
                                            }
                                        }
                                        @if (AvailableScripts.Any())
                                        {
                                            <li><hr class="dropdown-divider"></li>
                                            <li><h6 class="dropdown-header">Run Script</h6></li>
                                            @foreach (var script in AvailableScripts)
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => OnRunScriptOnLocation.InvokeAsync((script, WorkspaceViewModel.Workspace, location))">
                                                        <i class="bi bi-play-circle me-2"></i>@script.Name
                                                    </button>
                                                </li>
                                            }
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => DeleteLocation(location)">
                                                <i class="bi bi-trash me-2"></i>Delete Location
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <small class="text-muted path-truncate" title="@location.Path">@location.Path</small>
                            </p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<Modal @bind-IsVisible="IsAddLocationModalVisible" Title="@AddLocationModalTitle">
    <AddWorkspaceLocation @ref="locationForm" 
        OnLocationSubmitted="HandleLocationAdded" 
        ButtonText="Add Location" />
</Modal>

<Modal @bind-IsVisible="IsMoveToGroupModalVisible" Title="@MoveToGroupModalTitle">
    <MoveWorkspaceDialog @ref="moveWorkspaceDialog"
        Workspace="WorkspaceViewModel.Workspace"
        AvailableGroups="AvailableGroups"
        ErrorMessage="@GetModalError(MoveGroupModalKey)"
        ErrorMessageChanged="(msg) => ModalStateService.SetError(MoveGroupModalKey, msg)"
        OnMoveToGroup="HandleMoveToGroup" />
</Modal>

<Modal @bind-IsVisible="IsRenameModalVisible" Title="Rename Workspace">
    <RenameWorkspaceDialog @ref="renameWorkspaceDialog"
        WorkspaceName="@WorkspaceViewModel.Name"
        WorkspaceNameChanged="@((name) => { /* Name property is read-only and updated via the Workspace object */ })"
        ErrorMessage="@GetModalError(RenameModalKey)"
        ErrorMessageChanged="(msg) => ModalStateService.SetError(RenameModalKey, msg)"
        Workspace="WorkspaceViewModel.Workspace"
        AllGroups="AllGroups"
        OnRenameCompleted="HandleRenameCompleted" />
</Modal>

<style>
    
    
    
    
    /* Path truncation styles */
    .path-truncate {
        display: block;
        direction: rtl;
        text-align: left;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%;
    }
   
    
</style>

@code {
    [Parameter] public WorkspaceViewModel WorkspaceViewModel { get; set; } = null!;
    [Parameter] public GlobalCustomOpenOptions GlobalOptions { get; set; } = null!;
    [Parameter] public List<ScriptInfo> AvailableScripts { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AvailableGroups { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AllGroups { get; set; } = null!;
    [Parameter] public EventCallback OnDeleteWorkspace { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation)> OnOpenWorkspaceLocation { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInExplorer { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInTerminal { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation, CustomOpenOption)> OnOpenWithCustomApp { get; set; }
    [Parameter] public EventCallback<(ScriptInfo, Workspace, WorkspaceLocation)> OnRunScriptOnLocation { get; set; }
    [Parameter] public EventCallback OnAddLocation { get; set; }
    [Parameter] public EventCallback<(Workspace, string)> OnMoveToGroup { get; set; }
    [Parameter] public EventCallback OnRename { get; set; }

    // Component references for forms
    private AddWorkspaceLocation? locationForm;
    private MoveWorkspaceDialog? moveWorkspaceDialog;
    private RenameWorkspaceDialog? renameWorkspaceDialog;

    // Modal keys for ModalStateService - centralized approach
    private string AddLocationModalKey => ModalStateService.GetModalKey("addLocation", WorkspaceViewModel.Workspace.Id.ToString());
    private string MoveGroupModalKey => ModalStateService.GetModalKey("moveGroup", WorkspaceViewModel.Workspace.Id.ToString());
    private string RenameModalKey => ModalStateService.GetModalKey("rename", WorkspaceViewModel.Workspace.Id.ToString());
    
    // Create a helper method to get/set modal visibility to reduce duplication
    private bool GetModalVisibility(string modalKey) => ModalStateService.IsModalVisible(modalKey);
    private void SetModalVisibility(string modalKey, bool isVisible)
    {
        if (isVisible) ModalStateService.ShowModal(modalKey);
        else ModalStateService.HideModal(modalKey);
    }
    
    // Properties for binding to Modal components using the helper methods
    private bool IsAddLocationModalVisible
    {
        get => GetModalVisibility(AddLocationModalKey);
        set => SetModalVisibility(AddLocationModalKey, value);
    }
    
    private bool IsMoveToGroupModalVisible
    {
        get => GetModalVisibility(MoveGroupModalKey);
        set => SetModalVisibility(MoveGroupModalKey, value);
    }
    
    private bool IsRenameModalVisible
    {
        get => GetModalVisibility(RenameModalKey);
        set => SetModalVisibility(RenameModalKey, value);
    }

    private string? GetModalError(string modalKey) => ModalStateService.GetError(modalKey);
    
    private string AddLocationModalTitle => $"Add Location to {WorkspaceViewModel.Name}";
    private string MoveToGroupModalTitle => $"Move {WorkspaceViewModel.Name} to Group";

    protected override void OnParametersSet()
    {
        // Ensure the view model's expanded state is updated from CardStateService
        ViewModelFactory.UpdateWorkspaceExpandedState(WorkspaceViewModel);
    }

    private void ToggleExpand()
    {
        CardStateService.ToggleExpand("workspace", WorkspaceViewModel.Workspace.Id.ToString());
        WorkspaceViewModel.IsExpanded = !WorkspaceViewModel.IsExpanded;
    }
    
    private void ShowAddLocationModal()
    {
        IsAddLocationModalVisible = true;
    }

    private void ShowMoveToGroupModal()
    {
        IsMoveToGroupModalVisible = true;
    }

    private void ShowRenameModal()
    {
        IsRenameModalVisible = true;
    }

    private async Task HandleLocationAdded(WorkspaceLocation location)
    {
        IsAddLocationModalVisible = false;
        WorkspaceViewModel.Workspace.Locations.Add(location);
        locationForm?.ResetForm();
        await OnAddLocation.InvokeAsync();
        StateHasChanged();
    }

    private async Task HandleMoveToGroup((Workspace workspace, string groupName) moveInfo)
    {
        IsMoveToGroupModalVisible = false;
        moveWorkspaceDialog?.ResetForm();
        await OnMoveToGroup.InvokeAsync(moveInfo);
        StateHasChanged();
    }

    private void DeleteLocation(WorkspaceLocation location)
    {
        WorkspaceViewModel.Workspace.Locations.Remove(location);
        OnAddLocation.InvokeAsync();
        StateHasChanged();
    }

    private async Task OpenLocation(WorkspaceLocation location)
    {
        await OnOpenWorkspaceLocation.InvokeAsync((WorkspaceViewModel.Workspace, location));
    }

    private async Task HandleRenameCompleted()
    {
        IsRenameModalVisible = false;
        renameWorkspaceDialog?.ResetForm();
        await OnRename.InvokeAsync();
        StateHasChanged();
    }
}