@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Services
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject CardStateService CardStateService

<div class="card bg-dark text-light border-secondary mb-3 @(IsExpanded ? "expanded" : "")">
    <div class="card-header border-secondary d-flex align-items-center p-0">
        <div class="flex-grow-1 h-100 px-3 py-2" @onclick="ToggleExpand" style="cursor: pointer;">
            <h5 class="card-title mb-0">@Workspace.Name</h5>
        </div>
        <div class="dropdown h-100 border-start border-secondary">
            <button class="btn btn-link text-light dropdown-toggle h-100 px-3" data-bs-toggle="dropdown">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-dark">
                <li>
                    <button class="dropdown-item" @onclick="ShowAddLocationModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Location
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item" @onclick="ShowMoveToGroupModal">
                        <i class="bi bi-folder2 me-2"></i>Move to Group
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item text-danger" @onclick="() => OnDeleteWorkspace.InvokeAsync()">
                        <i class="bi bi-trash me-2"></i>Delete Workspace
                    </button>
                </li>
            </ul>
        </div>
    </div>

    @if (IsExpanded)
    {
        <div class="card-body">
            <div class="d-flex flex-column gap-3">
                @foreach (var location in Workspace.Locations)
                {
                    <div class="card bg-dark text-light border-secondary">
                        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <h6 class="card-title mb-0">@location.Name</h6>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-light btn-sm" title="Open Location" @onclick="() => OnOpenWorkspaceLocation.InvokeAsync((Workspace, location))">
                                    <i class="bi bi-folder"></i>
                                </button>
                                <button class="btn btn-outline-light btn-sm" title="More Options" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-dark">
                                    <li>
                                        <button class="dropdown-item" @onclick="() => OnOpenInExplorer.InvokeAsync(location)">
                                            <i class="bi bi-folder2-open me-2"></i>Open in Explorer
                                        </button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item" @onclick="() => OnOpenInTerminal.InvokeAsync(location)">
                                            <i class="bi bi-terminal me-2"></i>Open in Terminal
                                        </button>
                                    </li>
                                    @if (GlobalOptions.Options.Any())
                                    {
                                        <li><hr class="dropdown-divider"></li>
                                        <li><h6 class="dropdown-header">Open With</h6></li>
                                        @foreach (var option in GlobalOptions.Options)
                                        {
                                            <li>
                                                <button class="dropdown-item" @onclick="() => OnOpenWithCustomApp.InvokeAsync((Workspace, location, option.Value))">
                                                    <i class="bi bi-box-arrow-up-right me-2"></i>@option.Key
                                                </button>
                                            </li>
                                        }
                                    }
                                    @if (AvailableScripts.Any())
                                    {
                                        <li><hr class="dropdown-divider"></li>
                                        <li><h6 class="dropdown-header">Run Script</h6></li>
                                        @foreach (var script in AvailableScripts)
                                        {
                                            <li>
                                                <button class="dropdown-item" @onclick="() => OnRunScriptOnLocation.InvokeAsync((script, Workspace, location))">
                                                    <i class="bi bi-play-circle me-2"></i>@script.Name
                                                </button>
                                            </li>
                                        }
                                    }
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" @onclick="() => DeleteLocation(location)">
                                            <i class="bi bi-trash me-2"></i>Delete Location
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <small class="text-muted overflow-hidden text-truncate">@location.Path</small>
                            </p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<div class="modal fade" id="@ModalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Add Location to @Workspace.Name</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <AddWorkspaceLocation @ref="locationForm" OnLocationSubmitted="HandleLocationAdded" ButtonText="Add Location"/>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="@MoveToGroupModalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Move @Workspace.Name to Group</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Select Group</label>
                    <select class="form-select bg-dark text-light border-secondary" @bind="SelectedGroupName">
                        <option value="">Select a group...</option>
                        @foreach (var group in AvailableGroups)
                        {
                            @if (group.Name != Workspace.GroupName)
                            {
                                <option value="@group.Name">@group.Name</option>
                            }
                        }
                    </select>
                </div>
                <button class="btn btn-primary" @onclick="HandleMoveToGroup" disabled="@string.IsNullOrEmpty(SelectedGroupName)">
                    <i class="bi bi-folder2 me-2"></i>Move to Group
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        transition: all 0.3s ease-in-out;
    }
    .card.expanded {
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
</style>

@code {
    [Parameter] public Workspace Workspace { get; set; } = null!;
    [Parameter] public GlobalCustomOpenOptions GlobalOptions { get; set; } = null!;
    [Parameter] public List<ScriptInfo> AvailableScripts { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AvailableGroups { get; set; } = null!;
    [Parameter] public EventCallback OnDeleteWorkspace { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation)> OnOpenWorkspaceLocation { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInExplorer { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInTerminal { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation, CustomOpenOption)> OnOpenWithCustomApp { get; set; }
    [Parameter] public EventCallback<(ScriptInfo, Workspace, WorkspaceLocation)> OnRunScriptOnLocation { get; set; }
    [Parameter] public EventCallback OnAddLocation { get; set; }
    [Parameter] public EventCallback<(Workspace, string)> OnMoveToGroup { get; set; }

    private bool IsExpanded => CardStateService.IsExpanded("workspace", Workspace.Id.ToString());
    private AddWorkspaceLocation? locationForm;
    private IJSObjectReference? modal;
    private IJSObjectReference? moveToGroupModal;
    private string SelectedGroupName = string.Empty;

    private string ModalId => $"addLocationModal_{Workspace.Name.Replace(" ", "_").ToLower()}";
    private string MoveToGroupModalId => $"moveToGroupModal_{Workspace.Name.Replace(" ", "_").ToLower()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            modal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", $"#{ModalId}");
            moveToGroupModal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", $"#{MoveToGroupModalId}");
        }
    }

    private void ToggleExpand()
    {
        CardStateService.ToggleExpand("workspace", Workspace.Id.ToString());
    }

    private void ShowAddLocationModal()
    {
        if (modal is not null)
        {
            modal.InvokeVoidAsync("show");
        }
    }

    private void ShowMoveToGroupModal()
    {
        if (moveToGroupModal is not null)
        {
            moveToGroupModal.InvokeVoidAsync("show");
        }
    }

    private void HandleLocationAdded(WorkspaceLocation location)
    {
        if (modal is not null)
        {
            modal.InvokeVoidAsync("hide");
        }
        Workspace.Locations.Add(location);
        locationForm?.ResetForm();
        OnAddLocation.InvokeAsync();
        StateHasChanged();
    }

    private void HandleMoveToGroup()
    {
        if (moveToGroupModal is not null)
        {
            moveToGroupModal.InvokeVoidAsync("hide");
        }
        OnMoveToGroup.InvokeAsync((Workspace, SelectedGroupName));
        SelectedGroupName = string.Empty;
        StateHasChanged();
    }

    private void DeleteLocation(WorkspaceLocation location)
    {
        Workspace.Locations.Remove(location);
        OnAddLocation.InvokeAsync();
        StateHasChanged();
    }
}