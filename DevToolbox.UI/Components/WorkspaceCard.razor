@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Services
@using DevToolbox.UI.Services
@using Microsoft.JSInterop
@using System.Diagnostics
@inject IJSRuntime JS
@inject CardStateService CardStateService
@inject ModalService ModalService

<div class="card bg-dark text-light border-secondary mb-3 @(IsExpanded ? "expanded" : "")">
    <div class="card-header border-secondary d-flex align-items-center p-0">
        <div class="flex-grow-1 h-100 px-3 py-2" @onclick="ToggleExpand" style="cursor: pointer;">
            <h5 class="card-title mb-0">@Workspace.Name</h5>
        </div>
        <div class="dropdown h-100 border-start border-secondary">
            <button class="btn btn-link text-light dropdown-toggle h-100 px-3" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                <li>
                    <button class="dropdown-item" @onclick="ShowAddLocationModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Location
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item" @onclick="ShowMoveToGroupModal">
                        <i class="bi bi-folder2 me-2"></i>Move to Group
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item text-danger" @onclick="() => OnDeleteWorkspace.InvokeAsync()">
                        <i class="bi bi-trash me-2"></i>Delete Workspace
                    </button>
                </li>
            </ul>
        </div>
    </div>

    @if (IsExpanded)
    {
        <div class="card-body">
            <div class="d-flex flex-column gap-3">
                @foreach (var location in Workspace.Locations)
                {
                    <div class="card bg-dark text-light border-secondary">
                        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <h6 class="card-title mb-0">@location.Name</h6>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-light btn-sm" title="Open Location" @onclick="() => OpenLocation(location)">
                                    <i class="bi bi-folder"></i>
                                </button>
                                <div class="dropdown">
                                    <button class="btn btn-outline-light btn-sm" title="More Options" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-dark">
                                        <li>
                                            <button class="dropdown-item" @onclick="() => OnOpenInExplorer.InvokeAsync(location)">
                                                <i class="bi bi-folder2-open me-2"></i>Open in Explorer
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" @onclick="() => OnOpenInTerminal.InvokeAsync(location)">
                                                <i class="bi bi-terminal me-2"></i>Open in Terminal
                                            </button>
                                        </li>
                                        @if (GlobalOptions.Options.Any())
                                        {
                                            <li><hr class="dropdown-divider"></li>
                                            <li><h6 class="dropdown-header">Open With</h6></li>
                                            @foreach (var option in GlobalOptions.Options)
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => OnOpenWithCustomApp.InvokeAsync((Workspace, location, option.Value))">
                                                        <i class="bi bi-box-arrow-up-right me-2"></i>@option.Key
                                                    </button>
                                                </li>
                                            }
                                        }
                                        @if (AvailableScripts.Any())
                                        {
                                            <li><hr class="dropdown-divider"></li>
                                            <li><h6 class="dropdown-header">Run Script</h6></li>
                                            @foreach (var script in AvailableScripts)
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => OnRunScriptOnLocation.InvokeAsync((script, Workspace, location))">
                                                        <i class="bi bi-play-circle me-2"></i>@script.Name
                                                    </button>
                                                </li>
                                            }
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => DeleteLocation(location)">
                                                <i class="bi bi-trash me-2"></i>Delete Location
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <small class="text-muted overflow-hidden text-truncate">@location.Path</small>
                            </p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@* Move modals outside of the card *@
<div class="modal fade" id="@ModalId" tabindex="-1" style="z-index: 1055;">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">Add Location to @Workspace.Name</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body py-4">
                <AddWorkspaceLocation @ref="locationForm" OnLocationSubmitted="HandleLocationAdded" ButtonText="Add Location"/>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="@MoveToGroupModalId" tabindex="-1" style="z-index: 1055;">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">Move @Workspace.Name to Group</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body py-4">
                <div class="mb-4">
                    <label class="form-label mb-2">Select Group</label>
                    <select class="form-select bg-dark text-light border-secondary" @bind="SelectedGroupName">
                        <option value="">Select a group...</option>
                        @foreach (var group in AvailableGroups)
                        {
                            @if (group.Name != Workspace.GroupName)
                            {
                                <option value="@group.Name">@group.Name</option>
                            }
                        }
                    </select>
                </div>
                <button class="btn btn-primary" @onclick="HandleMoveToGroup" disabled="@string.IsNullOrEmpty(SelectedGroupName)">
                    <i class="bi bi-folder2 me-2"></i>Move to Group
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Base card styles */
    .card {
        transition: all 0.3s ease-in-out;
        border-width: 2px !important;
    }
    
    .card.expanded {
        box-shadow: 0 0 15px rgba(13, 110, 253, 0.15) !important;
        border-color: var(--bs-primary) !important;
    }
    
    .card-header {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }

    /* Card body styles */
    .card-body {
        transition: all 0.3s ease-out;
    }
    
    /* Button styles */
    .card .btn-outline-light {
        border-width: 2px;
        transition: all 0.2s ease-in-out;
    }
    
    .card .btn-outline-light:hover {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.3);
    }
    
    .dropdown-item:active {
        background-color: var(--bs-primary);
    }
    
    .card .btn-link {
        color: var(--bs-primary);
        transition: all 0.2s ease-in-out;
    }
    
    .card .btn-link:hover {
        color: var(--bs-primary);
        opacity: 0.8;
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.2);
    }
    
    .text-muted {
        color: rgba(255, 255, 255, 0.5) !important;
    }
    
    /* Location card styles */
    .card .card {
        transition: all 0.2s ease-in-out;
    }
    
    .card .card:hover {
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.15);
        border-color: var(--bs-primary) !important;
    }

    /* Modal content styles */
    .modal-content {
        border-width: 2px;
        border-color: var(--bs-primary);
    }

    /* Fix dropdown toggle button */
    .dropdown-toggle::after {
        display: none;
    }
</style>

@code {
    [Parameter] public Workspace Workspace { get; set; } = null!;
    [Parameter] public GlobalCustomOpenOptions GlobalOptions { get; set; } = null!;
    [Parameter] public List<ScriptInfo> AvailableScripts { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AvailableGroups { get; set; } = null!;
    [Parameter] public EventCallback OnDeleteWorkspace { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation)> OnOpenWorkspaceLocation { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInExplorer { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInTerminal { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation, CustomOpenOption)> OnOpenWithCustomApp { get; set; }
    [Parameter] public EventCallback<(ScriptInfo, Workspace, WorkspaceLocation)> OnRunScriptOnLocation { get; set; }
    [Parameter] public EventCallback OnAddLocation { get; set; }
    [Parameter] public EventCallback<(Workspace, string)> OnMoveToGroup { get; set; }

    private bool IsExpanded => CardStateService.IsExpanded("workspace", Workspace.Id.ToString());
    private AddWorkspaceLocation? locationForm;
    private string SelectedGroupName = string.Empty;

    private string ModalId => $"addLocationModal_{Workspace.Name.Replace(" ", "_").ToLower()}";
    private string MoveToGroupModalId => $"moveToGroupModal_{Workspace.Name.Replace(" ", "_").ToLower()}";

    private void ToggleExpand()
    {
        CardStateService.ToggleExpand("workspace", Workspace.Id.ToString());
    }

    private void ShowAddLocationModal()
    {
        ModalService.ShowAddLocationModal(Workspace);
    }

    private void ShowMoveToGroupModal()
    {
        ModalService.ShowMoveToGroupModal(Workspace);
    }

    private async Task HandleLocationAdded(WorkspaceLocation location)
    {
        ModalService.HideAddLocationModal();
        Workspace.Locations.Add(location);
        locationForm?.ResetForm();
        await OnAddLocation.InvokeAsync();
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }

    private void HandleMoveToGroup()
    {
        ModalService.HideMoveToGroupModal();
        OnMoveToGroup.InvokeAsync((Workspace, SelectedGroupName));
        SelectedGroupName = string.Empty;
        StateHasChanged();
    }

    private void DeleteLocation(WorkspaceLocation location)
    {
        Workspace.Locations.Remove(location);
        OnAddLocation.InvokeAsync();
        StateHasChanged();
    }

    private async Task OpenLocation(WorkspaceLocation location)
    {
        try
        {
            var path = location.Path;
            var startInfo = new ProcessStartInfo
            {
                FileName = path,
                UseShellExecute = true
            };
            Process.Start(startInfo);
        }
        catch (Exception ex)
        {
            // Log the error or show a notification
            Console.WriteLine($"Error opening location: {ex.Message}");
        }
    }
}