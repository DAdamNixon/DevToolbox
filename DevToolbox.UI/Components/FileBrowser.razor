@using System.Windows.Forms

<div class="file-browser">
    <div class="input-group">
        <input type="text" class="form-control" 
               value="@SelectedPath" 
               readonly 
               placeholder="Select a file or folder..."
               @onclick="OpenFileBrowser" />
        <button class="btn btn-outline-primary" @onclick="OpenFileBrowser">
            <i class="bi bi-folder2-open"></i> Browse
        </button>
    </div>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-2" role="alert">
            @ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ErrorMessage = string.Empty"></button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string SelectedPath { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnPathSelected { get; set; }

    [Parameter]
    public bool AllowFileSelection { get; set; } = true;

    [Parameter]
    public bool AllowFolderSelection { get; set; } = true;

    [Parameter]
    public string Filter { get; set; } = "All Files (*.*)|*.*";

    private string ErrorMessage { get; set; } = string.Empty;

    private async Task OpenFileBrowser()
    {
        try
        {
            if (AllowFileSelection && AllowFolderSelection)
            {
                // Show both file and folder selection options
                using var dialog = new OpenFileDialog
                {
                    Title = "Select a file or folder",
                    Filter = Filter,
                    CheckFileExists = false,
                    CheckPathExists = true,
                    FileName = "Select Folder",
                    InitialDirectory = Path.GetDirectoryName(SelectedPath) ?? Environment.GetFolderPath(Environment.SpecialFolder.MyComputer)
                };

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    var path = dialog.FileName;
                    if (path.EndsWith("Select Folder"))
                    {
                        // User wants to select a folder
                        using var folderDialog = new FolderBrowserDialog
                        {
                            Description = "Select a folder",
                            UseDescriptionForTitle = true,
                            ShowNewFolderButton = true,
                            RootFolder = Environment.SpecialFolder.MyComputer
                        };

                        if (folderDialog.ShowDialog() == DialogResult.OK)
                        {
                            SelectedPath = folderDialog.SelectedPath;
                            await OnPathSelected.InvokeAsync(SelectedPath);
                        }
                    }
                    else
                    {
                        SelectedPath = path;
                        await OnPathSelected.InvokeAsync(SelectedPath);
                    }
                }
            }
            else if (AllowFileSelection)
            {
                // Show only file selection
                using var dialog = new OpenFileDialog
                {
                    Title = "Select a file",
                    Filter = Filter,
                    CheckFileExists = true,
                    CheckPathExists = true,
                    InitialDirectory = Path.GetDirectoryName(SelectedPath) ?? Environment.GetFolderPath(Environment.SpecialFolder.MyComputer)
                };

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    SelectedPath = dialog.FileName;
                    await OnPathSelected.InvokeAsync(SelectedPath);
                }
            }
            else if (AllowFolderSelection)
            {
                // Show only folder selection
                using var dialog = new FolderBrowserDialog
                {
                    Description = "Select a folder",
                    UseDescriptionForTitle = true,
                    ShowNewFolderButton = true,
                    RootFolder = Environment.SpecialFolder.MyComputer
                };

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    SelectedPath = dialog.SelectedPath;
                    await OnPathSelected.InvokeAsync(SelectedPath);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error selecting path: {ex.Message}";
        }
    }
} 