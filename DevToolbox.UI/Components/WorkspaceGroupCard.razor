@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Services
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject CardStateService CardStateService

<div class="card bg-dark text-light border-secondary mb-3 @(IsExpanded ? "expanded" : "")">
    <div class="card-header border-secondary d-flex align-items-center p-0">
        <div class="flex-grow-1 h-100 px-3 py-2" @onclick="ToggleExpand" style="cursor: pointer;">
            <h5 class="card-title mb-0">@Group.Name</h5>
        </div>
        <div class="dropdown h-100 border-start border-secondary">
            <button class="btn btn-link text-light dropdown-toggle h-100 px-3" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                <li>
                    <button class="dropdown-item" @onclick="ShowAddWorkspaceModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Workspace
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" @onclick="ShowRenameModal">
                        <i class="bi bi-pencil me-2"></i>Rename
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item text-danger" @onclick="OnDelete">
                        <i class="bi bi-trash me-2"></i>Delete Group
                    </button>
                </li>
            </ul>
        </div>
    </div>
    @if (IsExpanded)
    {
        <div class="px-3 mt-2" @onclick:stopPropagation>
            <div class="input-group input-group-sm">
                <span class="input-group-text bg-dark text-light border-secondary">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" 
                       class="form-control form-control-sm bg-dark text-light border-secondary" 
                       placeholder="Search workspaces..."
                       @bind="SearchTerm"
                       @bind:event="oninput" />
            </div>
        </div>
    }
    <div class="card-body @(IsExpanded ? "expanded" : "collapsed")">
        <div class="row g-3">
            @foreach (var workspace in FilteredWorkspaces)
            {
                <div class="col-md-6 col-lg-4">
                    <WorkspaceCard 
                        Workspace="workspace"
                        GlobalOptions="GlobalOptions"
                        AvailableScripts="AvailableScripts"
                        AvailableGroups="AllGroups.Where(g => g.Name != Group.Name).ToList()"
                        OnDeleteWorkspace="() => OnDeleteWorkspace.InvokeAsync(workspace)"
                        OnOpenInExplorer="OnOpenInExplorer"
                        OnOpenInTerminal="OnOpenInTerminal"
                        OnOpenWithCustomApp="OnOpenWithCustomApp"
                        OnRunScriptOnLocation="OnRunScriptOnLocation"
                        OnAddLocation="OnAddWorkspace"
                        OnMoveToGroup="HandleMoveToGroup"
                        OnRename="OnAddWorkspace" />
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="@AddWorkspaceModalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">Add Workspace to @Group.Name</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body py-4">
                <div class="mb-4">
                    <label class="form-label mb-2">Workspace Name</label>
                    <input type="text" class="form-control bg-dark text-light border-secondary" @bind="NewWorkspaceName" 
                           placeholder="Enter workspace name" />
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="invalid-feedback d-block mt-2">
                            @ErrorMessage
                        </div>
                    }
                </div>
                <AddWorkspaceLocation @ref="locationForm" OnLocationSubmitted="HandleWorkspaceCreated" ButtonText="Create Workspace"/>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="@RenameModalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">Rename Group</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body py-4">
                <div class="mb-4">
                    <label class="form-label mb-2">New Name</label>
                    <input type="text" class="form-control bg-dark text-light border-secondary" @bind="NewGroupName" 
                           placeholder="Enter new name" />
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="invalid-feedback d-block mt-2">
                            @ErrorMessage
                        </div>
                    }
                </div>
                <button class="btn btn-primary" @onclick="HandleRename" disabled="@string.IsNullOrEmpty(NewGroupName)">
                    <i class="bi bi-check-lg me-2"></i>Rename
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Base card styles */
    .card {
        transition: all 0.3s ease-in-out;
        border-width: 2px !important;
    }
    
    .card.expanded {
        box-shadow: 0 0 15px rgba(13, 110, 253, 0.15) !important;
        border-color: var(--bs-primary) !important;
    }
    
    .card-header {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
    
    /* Card body styles */
    .card-body {
        transition: all 0.3s ease-out;
    }

    .card-body.expanded {
        max-height: 2000px;
        opacity: 1;
    }

    .card-body.collapsed {
        max-height: 0;
        opacity: 0;
        padding: 0;
        margin: 0;
    }

    /* Button styles */
    .card .btn-outline-light:hover {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.3);
    }
    
    .dropdown-item:active {
        background-color: var(--bs-primary);
    }
    
    .card .btn-link {
        color: var(--bs-primary);
        transition: all 0.2s ease-in-out;
    }
    
    .card .btn-link:hover {
        color: var(--bs-primary);
        opacity: 0.8;
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.2);
    }

    /* Form control styles */
    .form-control:focus {
        border-color: var(--bs-primary);
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .input-group-text {
        border-width: 2px;
    }

    /* Search bar styles */
    .input-group {
        transition: all 0.3s ease-out;
    }

    /* Add workspace button card */
    .card .card {
        transition: all 0.2s ease-in-out;
    }
    
    .card .card:hover {
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.15);
        border-color: var(--bs-primary) !important;
    }

    /* Main card hover effect */
    .card:hover {
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.15);
        border-color: var(--bs-primary) !important;
    }

    /* Fix dropdown toggle button */
    .dropdown-toggle::after {
        display: none;
    }

    /* Prevent interaction with collapsed or hidden elements */
    .collapse:not(.show),
    .card-body.collapsed,
    [style*="display: none"],
    [hidden] {
        pointer-events: none;
    }

    /* Ensure dropdowns are still interactive when shown */
    .dropdown-menu.show {
        pointer-events: auto;
    }

    /* Ensure modals are still interactive when shown */
    .modal.show {
        pointer-events: auto;
    }
</style>

@code {
    [Parameter] public WorkspaceGroup Group { get; set; } = null!;
    [Parameter] public GlobalCustomOpenOptions GlobalOptions { get; set; } = null!;
    [Parameter] public List<ScriptInfo> AvailableScripts { get; set; } = null!;
    [Parameter] public List<Workspace> AllWorkspaces { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AllGroups { get; set; } = null!;
    [Parameter] public EventCallback<WorkspaceGroup> OnDeleteGroup { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation)> OnOpenWorkspaceLocation { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInExplorer { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInTerminal { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation, CustomOpenOption)> OnOpenWithCustomApp { get; set; }
    [Parameter] public EventCallback<(ScriptInfo, Workspace, WorkspaceLocation)> OnRunScriptOnLocation { get; set; }
    [Parameter] public EventCallback OnAddWorkspace { get; set; }
    [Parameter] public EventCallback<(Workspace workspace, string groupName)> OnMoveToGroup { get; set; }
    [Parameter] public EventCallback<Workspace> OnDeleteWorkspace { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnDeleteLocation { get; set; }

    private string SearchTerm { get; set; } = string.Empty;

    private bool IsExpanded => CardStateService.IsExpanded("group", Group.Name);

    private IEnumerable<Workspace> FilteredWorkspaces =>
        string.IsNullOrWhiteSpace(SearchTerm)
            ? Group.Workspaces
            : Group.Workspaces.Where(w => w.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

    private AddWorkspaceLocation? locationForm;
    private IJSObjectReference? addWorkspaceModal;
    private string NewWorkspaceName = string.Empty;
    private string? ErrorMessage;

    private string AddWorkspaceModalId => $"addWorkspaceModal_{Group.Name.Replace(" ", "_").ToLower()}";
    private string RenameModalId => $"renameGroupModal_{Group.Name.Replace(" ", "_").ToLower()}";
    private IJSObjectReference? renameModal;
    private string NewGroupName = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addWorkspaceModal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", $"#{AddWorkspaceModalId}");
            renameModal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", $"#{RenameModalId}");
        }
    }

    private void ToggleExpand()
    {
        CardStateService.ToggleExpand("group", Group.Name);
    }

    private void ShowAddWorkspaceModal()
    {
        if (addWorkspaceModal is not null)
        {
            addWorkspaceModal.InvokeVoidAsync("show");
        }
    }

    private void ShowRenameModal()
    {
        NewGroupName = Group.Name;
        if (renameModal is not null)
        {
            renameModal.InvokeVoidAsync("show");
        }
    }

    private async Task HandleWorkspaceCreated(WorkspaceLocation location)
    {
        if (string.IsNullOrWhiteSpace(NewWorkspaceName))
        {
            ErrorMessage = "Please enter a workspace name.";
            return;
        }

        if (AllWorkspaces.Any(w => w.Name.Equals(NewWorkspaceName, StringComparison.OrdinalIgnoreCase)))
        {
            ErrorMessage = "A workspace with this name already exists.";
            return;
        }

        var workspace = new Workspace
        {
            Id = AllWorkspaces.Any() ? AllWorkspaces.Max(w => w.Id) + 1 : 1,
            Name = NewWorkspaceName,
            GroupName = Group.Name,
            Locations = new List<WorkspaceLocation> { location }
        };

        Group.Workspaces.Add(workspace);
        await OnAddWorkspace.InvokeAsync();

        if (addWorkspaceModal is not null)
        {
            await addWorkspaceModal.InvokeVoidAsync("hide");
        }

        NewWorkspaceName = string.Empty;
        locationForm?.ResetForm();
        ErrorMessage = null;
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteWorkspace(Workspace workspace)
    {
        Group.Workspaces.Remove(workspace);
        await OnAddWorkspace.InvokeAsync();
        StateHasChanged();
    }

    private async Task HandleMoveToGroup((Workspace workspace, string groupName) args)
    {
        // Remove workspace from current group
        Group.Workspaces.Remove(args.workspace);
        
        // Update workspace's group name
        args.workspace.GroupName = args.groupName;
        
        // Add workspace to new group
        var targetGroup = AllGroups.FirstOrDefault(g => g.Name == args.groupName);
        if (targetGroup != null)
        {
            targetGroup.Workspaces.Add(args.workspace);
        }
        
        await OnMoveToGroup.InvokeAsync(args);
        StateHasChanged();
    }

    private async Task OnDelete()
    {
        await OnDeleteGroup.InvokeAsync(Group);
    }

    private async Task OpenWorkspaceLocation((Workspace workspace, WorkspaceLocation location) args)
    {
        await OnOpenWorkspaceLocation.InvokeAsync(args);
    }

    private async Task OpenLocationInExplorer(WorkspaceLocation location)
    {
        await OnOpenInExplorer.InvokeAsync(location);
    }

    private async Task OpenLocationInTerminal(WorkspaceLocation location)
    {
        await OnOpenInTerminal.InvokeAsync(location);
    }

    private async Task OpenLocationWithCustomApp((Workspace workspace, WorkspaceLocation location, CustomOpenOption option) args)
    {
        await OnOpenWithCustomApp.InvokeAsync(args);
    }

    private async Task RunScriptOnLocation((ScriptInfo script, Workspace workspace, WorkspaceLocation location) args)
    {
        await OnRunScriptOnLocation.InvokeAsync(args);
    }

    private async Task SaveWorkspaces()
    {
        await OnAddWorkspace.InvokeAsync();
    }

    private void CreateNewWorkspace()
    {
        if (string.IsNullOrWhiteSpace(NewWorkspaceName))
        {
            ErrorMessage = "Please enter a workspace name";
            return;
        }

        var newWorkspace = new Workspace
        {
            Id = Group.Workspaces.Any() ? Group.Workspaces.Max(w => w.Id) + 1 : 1,
            Name = NewWorkspaceName,
            GroupName = Group.Name,
            Locations = new List<WorkspaceLocation>()
        };

        Group.Workspaces.Add(newWorkspace);
        NewWorkspaceName = string.Empty;
        ErrorMessage = string.Empty;
    }

    private async Task HandleRename()
    {
        if (string.IsNullOrWhiteSpace(NewGroupName))
        {
            ErrorMessage = "Please enter a name.";
            return;
        }

        if (AllGroups.Any(g => g.Name.Equals(NewGroupName, StringComparison.OrdinalIgnoreCase) && g.Name != Group.Name))
        {
            ErrorMessage = "A group with this name already exists.";
            return;
        }

        // Update all workspaces in this group to use the new group name
        foreach (var workspace in Group.Workspaces)
        {
            workspace.GroupName = NewGroupName;
        }

        Group.Name = NewGroupName;
        if (renameModal is not null)
        {
            await renameModal.InvokeVoidAsync("hide");
        }
        NewGroupName = string.Empty;
        ErrorMessage = null;
        await OnAddWorkspace.InvokeAsync();
        StateHasChanged();
    }
} 