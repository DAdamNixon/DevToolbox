@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using DevToolbox.Services.Interfaces
@using DevToolbox.Services.Services
@using DevToolbox.UI.Services
@using DevToolbox.UI.Models
@using Microsoft.JSInterop
@using DevToolbox.UI.Components.Dialogs
@inject IJSRuntime JS
@inject CardStateService CardStateService
@inject ViewModelFactory ViewModelFactory
@inject ModalStateService ModalStateService

<div class="card bg-dark text-light border-secondary mb-3 @(GroupViewModel.IsExpanded ? "expanded" : "")">
    <div class="card-header border-secondary d-flex align-items-center p-0">
        <div class="flex-grow-1 h-100 px-3 py-2" @onclick="ToggleExpand" style="cursor: pointer;">
            <h5 class="card-title mb-0">@GroupViewModel.Name</h5>
        </div>
        <div class="dropdown h-100 border-start border-secondary">
            <button class="btn btn-link text-light dropdown-toggle h-100 px-3" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                <li>
                    <button class="dropdown-item" @onclick="ShowAddWorkspaceModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Workspace
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" @onclick="ShowRenameModal">
                        <i class="bi bi-pencil me-2"></i>Rename
                    </button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <button class="dropdown-item text-danger" @onclick="OnDelete">
                        <i class="bi bi-trash me-2"></i>Delete Group
                    </button>
                </li>
            </ul>
        </div>
    </div>
    
    <div class="card-body @(GroupViewModel.IsExpanded ? "expanded" : "collapsed")">
        <div class="row g-3">
            @foreach (var workspaceViewModel in GroupViewModel.Workspaces)
            {
                <div class="col-md-6 col-lg-4">
                    <WorkspaceCard 
                        WorkspaceViewModel="workspaceViewModel"
                        GlobalOptions="GlobalOptions"
                        AvailableScripts="AvailableScripts"
                        AvailableGroups="AllGroups.Where(g => g.Name != GroupViewModel.Name).ToList()"
                        AllGroups="AllGroups"
                        OnDeleteWorkspace="() => DeleteWorkspace(workspaceViewModel.Workspace)"
                        OnOpenWorkspaceLocation="OnOpenWorkspaceLocation"
                        OnOpenInExplorer="OnOpenInExplorer"
                        OnOpenInTerminal="OnOpenInTerminal"
                        OnOpenWithCustomApp="OnOpenWithCustomApp"
                        OnRunScriptOnLocation="OnRunScriptOnLocation"
                        OnAddLocation="SaveWorkspaces"
                        OnMoveToGroup="HandleMoveToGroup"
                        OnRename="OnAddWorkspace" />
                </div>
            }
        </div>
    </div>
</div>

<Modal @bind-IsVisible="IsAddWorkspaceModalVisible" Title="@AddWorkspaceModalTitle">
    <AddWorkspaceDialog 
        WorkspaceName="@NewWorkspaceName"
        WorkspaceNameChanged="(name) => NewWorkspaceName = name"
        ErrorMessage="@GetModalError(AddWorkspaceModalKey)"
        ErrorMessageChanged="(msg) => ModalStateService.SetError(AddWorkspaceModalKey, msg)"
        GroupName="@GroupViewModel.Name"
        AllWorkspaces="AllWorkspaces"
        GroupWorkspaces="GroupViewModel.Group.Workspaces"
        OnWorkspaceCreated="HandleWorkspaceCreated" />
</Modal>

<Modal @bind-IsVisible="IsRenameModalVisible" Title="Rename Group">
    <RenameGroupDialog @ref="renameGroupDialog"
        GroupName="@NewGroupName"
        GroupNameChanged="(name) => NewGroupName = name"
        ErrorMessage="@GetModalError(RenameModalKey)"
        ErrorMessageChanged="(msg) => ModalStateService.SetError(RenameModalKey, msg)"
        Group="GroupViewModel.Group"
        AllGroups="AllGroups"
        OnRenameCompleted="HandleRenameCompleted" />
</Modal>

<style>
    /* Base card styles */
    .card {
        transition: all 0.3s ease-in-out;
        border-width: 2px !important;
    }
    
    .card.expanded {
        box-shadow: 0 0 15px rgba(13, 110, 253, 0.15) !important;
        border-color: var(--bs-primary) !important;
    }
    
    .card-header {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
    
    /* Card body styles */
    .card-body {
        transition: all 0.3s ease-out;
    }

    .card-body.expanded {
        max-height: 2000px;
        opacity: 1;
    }

    .card-body.collapsed {
        max-height: 0;
        opacity: 0;
        padding: 0;
        margin: 0;
    }

    /* Button styles */
    .card .btn-outline-light:hover {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.3);
    }
    
    .dropdown-item:active {
        background-color: var(--bs-primary);
    }
    
    .card .btn-link {
        color: var(--bs-primary);
        transition: all 0.2s ease-in-out;
    }
    
    .card .btn-link:hover {
        color: var(--bs-primary);
        opacity: 0.8;
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.2);
    }

    /* Form control styles */
    .form-control:focus {
        border-color: var(--bs-primary);
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .input-group-text {
        border-width: 2px;
    }

    /* Search bar styles */
    .input-group {
        transition: all 0.3s ease-out;
    }

    /* Add workspace button card */
    .card .card {
        transition: all 0.2s ease-in-out;
    }
    
    .card .card:hover {
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.15);
        border-color: var(--bs-primary) !important;
    }

    /* Main card hover effect */
    .card:hover {
        transform: translateY(-2px);
    }

    /* Ensure consistent dropdown z-index */
    .dropdown {
        position: relative;
    }
    
    .dropdown-menu {
        z-index: 1050 !important;
    }
</style>

@code {
    [Parameter] public WorkspaceGroupViewModel GroupViewModel { get; set; } = null!;
    [Parameter] public GlobalCustomOpenOptions GlobalOptions { get; set; } = null!;
    [Parameter] public List<ScriptInfo> AvailableScripts { get; set; } = null!;
    [Parameter] public List<WorkspaceGroup> AllGroups { get; set; } = null!;
    [Parameter] public List<Workspace> AllWorkspaces { get; set; } = new();
    [Parameter] public EventCallback<Workspace> OnDeleteWorkspace { get; set; }
    [Parameter] public EventCallback<WorkspaceGroup> OnDeleteGroup { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation)> OnOpenWorkspaceLocation { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInExplorer { get; set; }
    [Parameter] public EventCallback<WorkspaceLocation> OnOpenInTerminal { get; set; }
    [Parameter] public EventCallback<(Workspace, WorkspaceLocation, CustomOpenOption)> OnOpenWithCustomApp { get; set; }
    [Parameter] public EventCallback<(ScriptInfo, Workspace, WorkspaceLocation)> OnRunScriptOnLocation { get; set; }
    [Parameter] public EventCallback<(Workspace, string)> OnMoveToGroup { get; set; }
    [Parameter] public EventCallback OnAddWorkspace { get; set; }

    private string NewWorkspaceName = string.Empty;
    private string NewGroupName = string.Empty;

    // Modal keys for ModalStateService
    private string AddWorkspaceModalKey => ModalStateService.GetModalKey("addWorkspace", GroupViewModel.Group.Name);
    private string RenameModalKey => ModalStateService.GetModalKey("renameGroup", GroupViewModel.Group.Name);
    
    // Properties for binding to Modal components
    private bool IsAddWorkspaceModalVisible
    {
        get => ModalStateService.IsModalVisible(AddWorkspaceModalKey);
        set 
        {
            if (value) ModalStateService.ShowModal(AddWorkspaceModalKey);
            else ModalStateService.HideModal(AddWorkspaceModalKey);
        }
    }
    
    private bool IsRenameModalVisible
    {
        get => ModalStateService.IsModalVisible(RenameModalKey);
        set 
        {
            if (value) ModalStateService.ShowModal(RenameModalKey);
            else ModalStateService.HideModal(RenameModalKey);
        }
    }

    private string? GetModalError(string modalKey) => ModalStateService.GetError(modalKey);
    private string AddWorkspaceModalTitle => $"Add Workspace to {GroupViewModel.Name}";

    // Component references for forms
    private RenameGroupDialog? renameGroupDialog;

    protected override void OnParametersSet()
    {
        // Ensure the view model's expanded state is updated from CardStateService
        ViewModelFactory.UpdateGroupExpandedState(GroupViewModel);
    }

    private void ToggleExpand()
    {
        CardStateService.ToggleExpand("group", GroupViewModel.Group.Name);
        GroupViewModel.IsExpanded = !GroupViewModel.IsExpanded;
    }

    private void ShowAddWorkspaceModal()
    {
        NewWorkspaceName = string.Empty;
        IsAddWorkspaceModalVisible = true;
    }

    private void ShowRenameModal()
    {
        NewGroupName = GroupViewModel.Name;
        IsRenameModalVisible = true;
    }

    private async Task HandleWorkspaceCreated(Workspace workspace)
    {
        GroupViewModel.Group.Workspaces.Add(workspace);
        
        // Add to the view model as well
        var workspaceViewModel = ViewModelFactory.CreateWorkspaceViewModel(workspace);
        GroupViewModel.Workspaces.Add(workspaceViewModel);
        
        await OnAddWorkspace.InvokeAsync();

        IsAddWorkspaceModalVisible = false;
        NewWorkspaceName = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteWorkspace(Workspace workspace)
    {
        // Remove from domain model
        GroupViewModel.Group.Workspaces.Remove(workspace);
        
        // Remove from view model
        var workspaceViewModel = GroupViewModel.Workspaces.FirstOrDefault(vm => vm.Workspace.Id == workspace.Id);
        if (workspaceViewModel != null)
        {
            GroupViewModel.Workspaces.Remove(workspaceViewModel);
        }
        
        await OnAddWorkspace.InvokeAsync();
        StateHasChanged();
    }

    private async Task HandleMoveToGroup((Workspace workspace, string groupName) args)
    {
        // Remove from view model
        var workspaceViewModel = GroupViewModel.Workspaces.FirstOrDefault(vm => vm.Workspace.Id == args.workspace.Id);
        if (workspaceViewModel != null)
        {
            GroupViewModel.Workspaces.Remove(workspaceViewModel);
        }
        
        // Remove from domain model
        GroupViewModel.Group.Workspaces.Remove(args.workspace);
        
        // Update workspace's group name
        args.workspace.GroupName = args.groupName;
        
        // Add workspace to new group in domain model
        var targetGroup = AllGroups.FirstOrDefault(g => g.Name == args.groupName);
        if (targetGroup != null)
        {
            targetGroup.Workspaces.Add(args.workspace);
        }
        
        await OnMoveToGroup.InvokeAsync(args);
        StateHasChanged();
    }

    private async Task OnDelete()
    {
        await OnDeleteGroup.InvokeAsync(GroupViewModel.Group);
    }

    private async Task SaveWorkspaces()
    {
        await OnAddWorkspace.InvokeAsync();
    }

    private async Task HandleRenameCompleted()
    {
        IsRenameModalVisible = false;
        NewGroupName = string.Empty;
        renameGroupDialog?.ResetForm();
        await OnAddWorkspace.InvokeAsync();
        StateHasChanged();
    }
} 