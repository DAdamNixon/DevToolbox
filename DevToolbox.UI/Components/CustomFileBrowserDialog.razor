@using System.Windows.Forms
@using System.IO

<div class="modal fade show" style="display: block;" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">Select File or Folder</h5>
                <button type="button" class="btn-close btn-close-white" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex gap-2 mb-3">
                    <div class="input-group">
                        <input type="text" class="form-control bg-dark text-light border-secondary" 
                               value="@CurrentPath" 
                               readonly />
                        <button class="btn btn-outline-light" @onclick="NavigateUp">
                            <i class="bi bi-arrow-up"></i>
                        </button>
                    </div>
                    <button class="btn btn-outline-light" @onclick="CreateNewFolder">
                        <i class="bi bi-folder-plus"></i> New Folder
                    </button>
                </div>

                <div class="file-browser-content" style="height: 400px; overflow-y: auto;">
                    @foreach (var item in CurrentItems)
                    {
                        <div class="file-browser-item d-flex align-items-center p-2 border-bottom border-secondary"
                             @onclick="() => OnItemClick(item)"
                             style="cursor: pointer;">
                            <i class="bi @GetItemIcon(item) me-2"></i>
                            <span>@item.Name</span>
                        </div>
                    }
                </div>

                <div class="mt-3">
                    <div class="input-group">
                        <span class="input-group-text bg-dark text-light border-secondary">Filter:</span>
                        <input type="text" class="form-control bg-dark text-light border-secondary" 
                               @bind="Filter" 
                               @bind:event="oninput" />
                    </div>
                </div>
            </div>
            <div class="modal-footer border-secondary">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="OnSelect" disabled="@(!CanSelect)">
                    Select
                </button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {
    [Parameter]
    public string InitialPath { get; set; } = string.Empty;

    [Parameter]
    public string Filter { get; set; } = "*.*";

    [Parameter]
    public bool AllowFileSelection { get; set; } = true;

    [Parameter]
    public bool AllowFolderSelection { get; set; } = true;

    [Parameter]
    public EventCallback<string> OnPathSelected { get; set; }

    [Parameter]
    public EventCallback OnCanceled { get; set; }

    private string CurrentPath = string.Empty;
    private List<FileSystemItem> CurrentItems = new();
    private FileSystemItem? SelectedItem;
    private string NewFolderName = string.Empty;

    protected override void OnInitialized()
    {
        CurrentPath = string.IsNullOrEmpty(InitialPath) 
            ? Environment.GetFolderPath(Environment.SpecialFolder.MyComputer)
            : InitialPath;
        LoadCurrentDirectory();
    }

    private void LoadCurrentDirectory()
    {
        CurrentItems.Clear();
        SelectedItem = null;

        // Add parent directory if not at root
        if (CurrentPath != Environment.GetFolderPath(Environment.SpecialFolder.MyComputer))
        {
            var parent = Path.GetDirectoryName(CurrentPath);
            if (!string.IsNullOrEmpty(parent))
            {
                CurrentItems.Add(new FileSystemItem
                {
                    Name = "..",
                    Path = parent,
                    IsDirectory = true
                });
            }
        }

        // Add drives if at root
        if (CurrentPath == Environment.GetFolderPath(Environment.SpecialFolder.MyComputer))
        {
            foreach (var drive in DriveInfo.GetDrives())
            {
                CurrentItems.Add(new FileSystemItem
                {
                    Name = drive.Name,
                    Path = drive.RootDirectory.FullName,
                    IsDirectory = true
                });
            }
        }
        else
        {
            // Add directories
            foreach (var dir in Directory.GetDirectories(CurrentPath))
            {
                var dirInfo = new DirectoryInfo(dir);
                if (IsMatchFilter(dirInfo.Name))
                {
                    CurrentItems.Add(new FileSystemItem
                    {
                        Name = dirInfo.Name,
                        Path = dirInfo.FullName,
                        IsDirectory = true
                    });
                }
            }

            // Add files if allowed
            if (AllowFileSelection)
            {
                foreach (var file in Directory.GetFiles(CurrentPath))
                {
                    var fileInfo = new FileInfo(file);
                    if (IsMatchFilter(fileInfo.Name))
                    {
                        CurrentItems.Add(new FileSystemItem
                        {
                            Name = fileInfo.Name,
                            Path = fileInfo.FullName,
                            IsDirectory = false
                        });
                    }
                }
            }
        }

        StateHasChanged();
    }

    private bool IsMatchFilter(string name)
    {
        if (Filter == "*.*") return true;
        var patterns = Filter.Split('|');
        return patterns.Any(p => name.EndsWith(p.TrimStart('*')));
    }

    private string GetItemIcon(FileSystemItem item)
    {
        if (item.Name == "..") return "bi-arrow-up-circle";
        if (item.IsDirectory) return "bi-folder2";
        return "bi-file-earmark";
    }

    private void OnItemClick(FileSystemItem item)
    {
        if (item.Name == "..")
        {
            CurrentPath = item.Path;
            LoadCurrentDirectory();
        }
        else if (item.IsDirectory)
        {
            CurrentPath = item.Path;
            LoadCurrentDirectory();
        }
        else
        {
            SelectedItem = item;
            StateHasChanged();
        }
    }

    private void NavigateUp()
    {
        var parent = Path.GetDirectoryName(CurrentPath);
        if (!string.IsNullOrEmpty(parent))
        {
            CurrentPath = parent;
            LoadCurrentDirectory();
        }
    }

    private async Task CreateNewFolder()
    {
        // TODO: Implement new folder creation
    }

    private bool CanSelect => 
        (AllowFileSelection && SelectedItem != null && !SelectedItem.IsDirectory) ||
        (AllowFolderSelection && CurrentPath != Environment.GetFolderPath(Environment.SpecialFolder.MyComputer));

    private async Task OnSelect()
    {
        var path = SelectedItem?.Path ?? CurrentPath;
        await OnPathSelected.InvokeAsync(path);
    }

    private async Task OnCancel()
    {
        await OnCanceled.InvokeAsync();
    }

    
} 