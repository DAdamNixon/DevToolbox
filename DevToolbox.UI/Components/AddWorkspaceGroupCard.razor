@using DevToolbox.UI.Components
@using DevToolbox.Services.Models
@using System.Windows.Forms

<div id="AddWorkspaceGroupCard" class="card shadow-sm mb-4" style="min-width: 300px;">
    <div class="card-header">
        <button class="btn w-100 text-start p-0 border-0 d-flex align-items-center justify-content-between" type="button" data-bs-toggle="collapse" data-bs-target="#newGroupForm" aria-expanded="false" aria-controls="newGroupForm">
            <div class="d-flex align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-folder-plus me-2"></i>Add New Group
                </h5>
            </div>
            <i class="bi bi-chevron-down collapse-icon ms-3"></i>
        </button>
    </div>
    <div class="collapse" id="newGroupForm">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-12">
                    <label class="form-label">Group Name</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-folder"></i></span>
                        <input type="text" class="form-control" @bind="NewGroupName" 
                            placeholder="Enter unique group name" />
                    </div>
                    @if (!string.IsNullOrEmpty(NameErrorMessage))
                    {
                        <div class="invalid-feedback d-block">
                            @NameErrorMessage
                        </div>
                    }
                </div>
                <div class="col-12">
                    <button class="btn btn-primary" @onclick="CreateNewGroup" disabled="@(!CanCreateGroup)">
                        <i class="bi bi-plus-circle me-2"></i>Create Group
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<WorkspaceGroup> OnGroupCreated { get; set; }

    [Parameter]
    public IEnumerable<WorkspaceGroup> ExistingGroups { get; set; } = Array.Empty<WorkspaceGroup>();

    private string NewGroupName = string.Empty;
    private string? NameErrorMessage;

    private bool CanCreateGroup => 
        !string.IsNullOrWhiteSpace(NewGroupName);

    private async Task CreateNewGroup()
    {
        if (!CanCreateGroup) {
            NameErrorMessage = "Please enter a group name.";
            return;
        }

        // Check for duplicate group name
        if (ExistingGroups.Any(g => g.Name.Equals(NewGroupName, StringComparison.OrdinalIgnoreCase)))
        {
            NameErrorMessage = "A group with this name already exists.";
            return;
        }

        var group = new WorkspaceGroup
        {
            Name = NewGroupName,
            Workspaces = new List<Workspace>()
        };

        await OnGroupCreated.InvokeAsync(group);

        NewGroupName = string.Empty;
        NameErrorMessage = null;
    }
} 