@using System.Windows.Forms
@using System.IO
@using DevToolbox.UI.Components

<Modal @bind-IsVisible="IsVisible" Title="Select File or Folder">
    <div class="mb-3">
        <label class="form-label">Path</label>
        <input type="text" class="form-control bg-dark text-light border-secondary" 
            value="@CurrentPath" 
            @onchange="OnPathChanged" />
    </div>
    <div class="mb-3">
        <label class="form-label">Files</label>
        <select class="form-select bg-dark text-light border-secondary" 
                @onchange="OnFileSelected">
            <option value="">Select a file...</option>
            @foreach (var file in Files)
            {
                <option value="@file">@file</option>
            }
        </select>
    </div>
    <div class="mt-4 d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="OnSelect">Select</button>
    </div>
</Modal>

@code {
    [Parameter] public string InitialPath { get; set; } = string.Empty;
    [Parameter] public string Filter { get; set; } = "All Files (*.*)|*.*";
    [Parameter] public bool AllowFileSelection { get; set; } = true;
    [Parameter] public bool AllowFolderSelection { get; set; } = true;
    [Parameter] public EventCallback<string> OnPathSelected { get; set; }
    [Parameter] public EventCallback OnCanceled { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string CurrentPath { get; set; } = string.Empty;
    private List<string> Files { get; set; } = new();
    private string SelectedFile { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        CurrentPath = InitialPath;
        UpdateFiles();
    }

    private void OnPathChanged(ChangeEventArgs e)
    {
        CurrentPath = e.Value?.ToString() ?? string.Empty;
        UpdateFiles();
    }

    private void OnFileSelected(ChangeEventArgs e)
    {
        SelectedFile = e.Value?.ToString() ?? string.Empty;
    }

    private void UpdateFiles()
    {
        try
        {
            if (Directory.Exists(CurrentPath))
            {
                Files = Directory.GetFiles(CurrentPath)
                    .Select(Path.GetFileName)
                    .Where(name => name != null)
                    .Select(name => name!)
                    .ToList();
            }
            else
            {
                Files = new List<string>();
            }
        }
        catch
        {
            Files = new List<string>();
        }
    }

    private async Task OnSelect()
    {
        if (!string.IsNullOrEmpty(SelectedFile))
        {
            var fullPath = Path.Combine(CurrentPath, SelectedFile);
            await OnPathSelected.InvokeAsync(fullPath);
        }
        else
        {
            await OnPathSelected.InvokeAsync(CurrentPath);
        }
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task Cancel()
    {
        await OnCanceled.InvokeAsync();
        await IsVisibleChanged.InvokeAsync(false);
    }
} 