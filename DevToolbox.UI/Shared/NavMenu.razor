@inject NavigationManager NavigationManager
@implements IDisposable

<nav class="navbar navbar-expand-lg">
    <div class="container-fluid">
        <div class="navbar-nav d-flex flex-row gap-3">
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("/")" href="/">Home</a>
            </div>
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("/workspaces")" href="/workspaces">Workspaces</a>
            </div>
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("/logs")" href="/logs">Log Viewer</a>
            </div>
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("/powershell")" href="/powershell">PowerShell</a>
            </div>
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("/settings")" href="/settings">Settings</a>
            </div>
        </div>
    </div>
</nav>

@code {
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Force the component to re-render when navigation occurs
        StateHasChanged();
    }

    private string GetActiveClass(string route)
    {
        var currentPath = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri).TrimEnd('/');
        
        // Special case for root
        if (currentPath == "/" && route == "/")
            return "active";
            
        // For exact matches
        if (currentPath == route)
            return "active";
            
        // Not active
        return "";
    }
    
    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
} 