@inject DevToolbox.Services.ThemeService ThemeService
@inject DevToolbox.UI.Services.ThemeJsInterop ThemeJsInterop
@implements IAsyncDisposable

<div class="dark-mode-toggle">
    <span class="light-icon">‚òÄÔ∏è</span>
    <label class="switch">
        <input type="checkbox" @bind="isDarkModeEnabled" @oninput="OnToggle" />
        <span class="slider"></span>
    </label>
    <span class="dark-icon">üåô</span>
</div>

@code {
    private bool isDarkModeEnabled;
    
    protected override async Task OnInitializedAsync()
    {
        // Get initial state from browser
        isDarkModeEnabled = await ThemeJsInterop.IsDarkModeEnabledAsync();
        
        // Initialize the theme service with the current state
        ThemeService.Initialize(isDarkModeEnabled);
        
        // Subscribe to theme changes
        ThemeService.ThemeChanged += OnThemeChanged;
        
        await base.OnInitializedAsync();
    }
    
    private async Task OnToggle(ChangeEventArgs e)
    {
        bool newValue = (bool)e.Value!;
        await ThemeService.SetThemeAsync(newValue);
        
        // Update the UI via JavaScript
        await ThemeJsInterop.ToggleDarkModeAsync(newValue);
    }
    
    private void OnThemeChanged(object? sender, bool isDarkMode)
    {
        // Update local state if it was changed elsewhere
        if (isDarkModeEnabled != isDarkMode)
        {
            isDarkModeEnabled = isDarkMode;
            StateHasChanged();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
} 